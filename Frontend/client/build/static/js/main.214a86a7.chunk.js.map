{"version":3,"sources":["components/Header.js","components/SensorID_Data.js","components/SensorID.js","components/SensorList.js","components/Error.js","components/SensorRealData.js","components/SensorReal.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","to","React","Component","SensorID_Data","props","state","data","fetch","this","id","then","response","json","setState","className","map","sensor","key","sensor_id","sensor_name","temperature","humidity","reading_time","SensorID","currentId","showById","handleClick","bind","event","target","firstChild","nodeValue","sensor_status","onClick","getComponent","SensorList","Error","SensorReal","socketIO","connect","path","on","dataInformation","SensorRealData","App","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.214a86a7.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../css/Header.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"wrapper\">\r\n                <div class=\"menu-bar\">\r\n                    <nav class=\"main-nav\">\r\n                        <NavLink class=\"sens\" to=\"/sensors\">Information About Sensors</NavLink>\r\n                        <NavLink class=\"sens\" to=\"/sensors/real\">Real-Time Data About Sensors</NavLink>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Header;\r\n","import React from 'react'\r\nimport '../css/SensorTable.css'\r\n\r\n\r\nclass SensorID_Data extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data:[],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`http://192.168.1.4:8000/sensors/${this.props.id}/data`)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ data }));\r\n      }\r\n\r\n      render() {\r\n        const {data} = this.state;\r\n        return (\r\n          <div className=\"container\">\r\n            <table id=\"sensorList\">\r\n              <thead>\r\n                <tr>\r\n                <th>SensorName</th>\r\n                <th>SensorTemperature</th>\r\n                <th>SensorHumidity</th>\r\n                <th>ReadingTime</th>\r\n                </tr>\r\n              </thead>\r\n                {data.map(sensor =>\r\n              <tbody key= {sensor.sensor_id}>\r\n                <tr>\r\n                <td>{sensor.sensor_name}</td>\r\n                <td>{sensor.temperature}</td>\r\n                <td>{sensor.humidity}</td>\r\n                <td>{sensor.reading_time}</td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n            </table>\r\n          </div>\r\n        );\r\n      }\r\n\r\n}\r\nexport default SensorID_Data","import React from 'react'\r\nimport '../css/SensorTable.css'\r\nimport SensorID_Data from '../components/SensorID_Data'\r\n\r\nclass SensorID extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          data:[],\r\n          currentId:[],\r\n          showById:false\r\n            };\r\n            this.handleClick = this.handleClick.bind(this);\r\n        }\r\n    \r\n      componentDidMount(){\r\n        fetch(`http://192.168.1.4:8000/sensors/${this.props.id}`)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ data }));\r\n      }\r\n\r\n      getComponent() {\r\n        if (this.state.showById) {  // show the model if state showByID is true\r\n          return <SensorID_Data id={this.state.currentId}/>;\r\n          \r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      handleClick(event) {  // switch the value of the showModal state\r\n        this.setState({\r\n          showById: !this.state.showById,\r\n          currentId : event.target.firstChild.nodeValue\r\n        });\r\n        \r\n      }\r\n      \r\n      render() {\r\n        const {data} = this.state;\r\n        return (\r\n          <div className=\"container\">\r\n            <table id=\"sensorList\">\r\n              <thead>\r\n                <tr>\r\n                <th>SensorStatus</th>\r\n                <th>SensorName</th>\r\n                <th>SensorID</th>\r\n                </tr>\r\n              </thead>\r\n                {data.map(sensor =>\r\n              <tbody key= {sensor.sensor_id}>\r\n                <tr>\r\n                <td>{sensor.sensor_status}</td>\r\n                <td>{sensor.sensor_name}</td>\r\n                <td class=\"click\" onClick={this.handleClick}>{sensor.sensor_id}</td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n            </table>\r\n            {this.getComponent()}\r\n          </div>\r\n        );\r\n      }\r\n}\r\nexport default SensorID;","import React from 'react'\r\nimport '../css/SensorTable.css'\r\nimport SensorID from '../components/SensorID'\r\n\r\n\r\nclass SensorList extends React.Component{\r\n    constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data:[],\r\n      currentId:[],\r\n      showById:false\r\n        };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n  componentDidMount(){\r\n    fetch('http://192.168.1.4:8000/sensors')\r\n    .then(response => response.json())\r\n    .then(data => this.setState({ data }));\r\n  }\r\n\r\n  getComponent() {\r\n    if (this.state.showById) {  // show the model if state showByID is true\r\n      return <SensorID id={this.state.currentId}/>;\r\n      \r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  handleClick(event) {  // switch the value of the showModal state\r\n    this.setState({\r\n      showById: !this.state.showById,\r\n      currentId : event.target.firstChild.nodeValue\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n    const {data} = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <table id=\"sensorList\">\r\n          <thead>\r\n            <tr>\r\n            <th>SensorStatus</th>\r\n            <th>SensorName</th>\r\n            <th>SensorID</th>\r\n            </tr>\r\n          </thead>\r\n            {data.map(sensor =>\r\n          <tbody key= {sensor.sensor_id}>\r\n            <tr>\r\n            <td>{sensor.sensor_status}</td>\r\n            <td>{sensor.sensor_name}</td>\r\n            <td class=\"click\" onClick={this.handleClick}>{sensor.sensor_id}</td>\r\n            </tr>\r\n          </tbody>\r\n        )}\r\n        </table>\r\n        {this.getComponent()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SensorList;\r\n\r\n","import React from 'react'\r\n\r\nconst Error = () =>{\r\n    return(\r\n        <div>\r\n            <p>Error: Page does not exist!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Error","import React from 'react'\r\nimport  '../css/SensorTable.css'\r\nimport socketIO from \"socket.io-client\"\r\n\r\nclass SensorReal extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data:[],\r\n        };\r\n        \r\n    }\r\n\r\n        componentDidUpdate(){\r\n           const socket = socketIO.connect('http://localhost:8000', {path:\"/data\"})\r\n           socket.on('getFullDataFromApi', dataInformation => this.setState({data:dataInformation}))\r\n        }\r\n\r\n\r\n        render(){\r\n            const {data} = this.state\r\n            return(\r\n                <div className=\"container\">\r\n                <h1>RealTime Sensors</h1>\r\n                <table id=\"sensorList\">\r\n                  <thead>\r\n                    <tr>\r\n                    <th>SensorName</th>\r\n                    <th>SensorTemperature</th>\r\n                    <th>SensorHumidity</th>\r\n                    <th>ReadingTime</th>\r\n                    </tr>\r\n                  </thead>\r\n                    {data.map(sensor =>\r\n                  <tbody key= {sensor.sensor_id}>\r\n                    <tr>\r\n                    <td>{sensor.sensor_name}</td>\r\n                    <td>{sensor.temperature}</td>\r\n                    <td>{sensor.humidity}</td>\r\n                    <td>{sensor.reading_time}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                )}\r\n                </table>\r\n              </div>\r\n            );\r\n        }\r\n}\r\nexport default SensorReal;","import React from 'react'\r\nimport  '../css/SensorTable.css'\r\nimport socketIO from \"socket.io-client\"\r\nimport SensorRealData from \"../components/SensorRealData\"\r\n\r\nclass SensorReal extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data:[],\r\n            currentId:[],\r\n            showById:false\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n        componentDidUpdate(){\r\n           const socket = socketIO.connect('http://localhost:8000', {path:\"/data\"})\r\n           socket.on('getDataFromApi', dataInformation => this.setState({data:dataInformation}))\r\n        }\r\n\r\n        getComponent() {\r\n            if (this.state.showById) {  \r\n              return <SensorRealData id={this.state.currentId}/>;\r\n              \r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n\r\n          handleClick(event) {  \r\n            this.setState({\r\n              showById: !this.state.showById,\r\n              currentId : event.target.firstChild.nodeValue\r\n            });\r\n            \r\n          }\r\n        \r\n\r\n        render(){\r\n            const {data} = this.state\r\n            return(\r\n                <div className=\"container\">\r\n                <h1>RealTime Sensors</h1>\r\n                <table id=\"sensorList\">\r\n                  <thead>\r\n                    <tr>\r\n                    <th>SensorStatus</th>\r\n                    <th>SensorName</th>\r\n                    <th>SensorID</th>\r\n                    </tr>\r\n                  </thead>\r\n                    {data.map(sensor =>\r\n                  <tbody key= {sensor.sensor_id}>\r\n                    <tr>\r\n                    <td>{sensor.sensor_status}</td>\r\n                    <td>{sensor.sensor_name}</td>\r\n                    <td class=\"click\" onClick={this.handleClick}>{sensor.sensor_id}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                )}\r\n                </table>\r\n                {this.getComponent()}\r\n              </div>\r\n            );\r\n        }\r\n}\r\nexport default SensorReal;","import React from 'react';\nimport './css/App.css';\nimport Header from './components/Header'\nimport SensorList from './components/SensorList'\nimport SensorID from './components/SensorID'\nimport Error from './components/Error'\nimport SensorReal from './components/SensorReal'\nimport { BrowserRouter,Switch,Route } from 'react-router-dom';\n\n\nclass App extends React.Component{\nrender(){\n  return(\n    <BrowserRouter>\n    <div>\n      <Header />\n      <Switch>\n             <Route path=\"/sensors\" component={SensorList} exact/>\n             <Route path=\"/sensors/id\" component={SensorID}/>\n            <Route path=\"/sensors/real\" component ={SensorReal}/> \n            <Route component={Error}/>\n           </Switch>\n    </div>\n    <div>\n    </div>\n    </BrowserRouter>\n  )\n}\n}\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}